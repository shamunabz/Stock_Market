import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime, timedelta
from keras.models import Model
from keras.layers import LSTM, Dense, Dropout, Conv1D, MaxPooling1D, Flatten, Concatenate, Input
from sklearn.preprocessing import MinMaxScaler, StandardScaler
import yfinance as yf
from sklearn.model_selection import train_test_split
from keras.callbacks import EarlyStopping, ReduceLROnPlateau

def fetch_data(stock_symbol, start_date, end_date):
    df = yf.download(stock_symbol, start=start_date, end=end_date)
    df.reset_index(inplace=True)
    return df

def simulate_news_sentiment(start_date, end_date):
    dates = pd.date_range(start_date, end_date)
    sentiments = np.random.normal(0, 1, len(dates))
    sentiment_df = pd.DataFrame({'Date': dates, 'Sentiment': sentiments})
    return sentiment_df

def preprocess_data(df, sentiment_df):
    df['Date'] = pd.to_datetime(df['Date']).dt.date
    sentiment_df['Date'] = pd.to_datetime(sentiment_df['Date']).dt.date

    df = df[['Date', 'Close']]
    merged_df = pd.merge(df, sentiment_df, on='Date', how='left').fillna(0)

    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(merged_df[['Close']])

    sentiment_scaler = StandardScaler()
    scaled_sentiment = sentiment_scaler.fit_transform(merged_df[['Sentiment']])

    X_price = []
    X_sentiment = []
    y = []
    for i in range(60, len(scaled_data)):
        X_price.append(scaled_data[i-60:i, 0])
        X_sentiment.append(scaled_sentiment[i-60:i, 0])
        y.append(scaled_data[i, 0])

    X_price, X_sentiment, y = np.array(X_price), np.array(X_sentiment), np.array(y)
    X_price = np.reshape(X_price, (X_price.shape[0], X_price.shape[1], 1))
    X_sentiment = np.reshape(X_sentiment, (X_sentiment.shape[0], X_sentiment.shape[1], 1))
    dates = df['Date'][60:].values
    return X_price, X_sentiment, y, scaler, dates, scaled_data, sentiment_scaler

def plot_results(test_dates, real_data, predicted_data, future_dates, future_predictions):
    plt.figure(figsize=(14, 7))
    plt.plot(test_dates, real_data, color='red', label='Real Stock Price')
    plt.plot(test_dates, predicted_data, color='blue', label='Predicted Stock Price on Test Data')
    plt.plot(future_dates, future_predictions, color='green', label='Future Predicted Stock Price')
    plt.title('Stock Price Prediction with Sentiment Analysis')
    plt.xlabel('Date')
    plt.ylabel('Stock Price')
    plt.legend()
    plt.show()

def predict_future_prices(model, last_60_days_scaled, last_60_sentiment_scaled, days_to_predict, scaler, sentiment_scaler, last_known_date):
    future_predictions = []
    current_batch_price = last_60_days_scaled.reshape((1, 60, 1))
    current_batch_sentiment = last_60_sentiment_scaled.reshape((1, 60, 1))

    for i in range(days_to_predict):
        current_pred = model.predict([current_batch_price, current_batch_sentiment])[0]
        current_pred = current_pred.reshape((1, 1, 1))
        future_predictions.append(current_pred[0, 0, 0])
        current_batch_price = np.append(current_batch_price[:, 1:, :], current_pred, axis=1)
        current_batch_sentiment = np.append(current_batch_sentiment[:, 1:, :], [[[0]]], axis=1)

    future_predictions = scaler.inverse_transform(np.array(future_predictions).reshape(-1, 1))
    future_dates = [last_known_date + timedelta(days=i) for i in range(1, days_to_predict + 1)]
    return future_predictions, future_dates

def build_hybrid_model(input_shape):
    price_input = Input(shape=input_shape)
    sentiment_input = Input(shape=input_shape)

    conv1_price = Conv1D(filters=64, kernel_size=3, activation='relu')(price_input)
    pool1_price = MaxPooling1D(pool_size=2)(conv1_price)
    conv2_price = Conv1D(filters=64, kernel_size=3, activation='relu')(pool1_price)
    pool2_price = MaxPooling1D(pool_size=2)(conv2_price)
    flat_price = Flatten()(pool2_price)

    conv1_sentiment = Conv1D(filters=64, kernel_size=3, activation='relu')(sentiment_input)
    pool1_sentiment = MaxPooling1D(pool_size=2)(conv1_sentiment)
    conv2_sentiment = Conv1D(filters=64, kernel_size=3, activation='relu')(pool1_sentiment)
    pool2_sentiment = MaxPooling1D(pool_size=2)(conv2_sentiment)
    flat_sentiment = Flatten()(pool2_sentiment)

    concatenated = Concatenate()([flat_price, flat_sentiment])

    dense1 = Dense(units=128, activation='relu')(concatenated)
    dropout1 = Dropout(0.2)(dense1)
    dense2 = Dense(units=64, activation='relu')(dropout1)
    dropout2 = Dropout(0.2)(dense2)
    output = Dense(units=1)(dropout2)

    model = Model(inputs=[price_input, sentiment_input], outputs=output)
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

def main():
    stock_symbol = 'TSLA'
    start_date = '2021-01-01'
    end_date = '2024-01-01'
    df = fetch_data(stock_symbol, start_date, end_date)
    sentiment_df = simulate_news_sentiment(start_date, end_date)
    X_price, X_sentiment, y, scaler, dates, scaled_data, sentiment_scaler = preprocess_data(df, sentiment_df)

    X_price_train, X_price_test, X_sentiment_train, X_sentiment_test, y_train, y_test, dates_train, dates_test = train_test_split(
        X_price, X_sentiment, y, dates, test_size=0.2, shuffle=False)

    model = build_hybrid_model((X_price.shape[1], 1))

    early_stopping = EarlyStopping(monitor='val_loss', patience=10)
    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, min_lr=0.00001)

    history = model.fit(
        [X_price_train, X_sentiment_train], y_train, epochs=100, batch_size=32,
        validation_data=([X_price_test, X_sentiment_test], y_test),
        callbacks=[early_stopping, reduce_lr])

    predicted_stock_price = model.predict([X_price_test, X_sentiment_test])
    predicted_stock_price = scaler.inverse_transform(predicted_stock_price)

    future_predictions, future_dates = predict_future_prices(
        model, X_price[-1], X_sentiment[-1], 30, scaler, sentiment_scaler, dates[-1])

    plot_results(dates_test, scaler.inverse_transform(y_test.reshape(-1, 1)),
                 predicted_stock_price, future_dates, future_predictions)

if __name__ == "__main__":
    main()
